{"ast":null,"code":"// Fashion Archive API Service\n// Bridges React UI to Python backend maintaining exact same functionality\n\nclass FashionArchiveAPI {\n  // Helper to call Python backend\n  static async callPython(endpoint, data = {}) {\n    try {\n      const response = await fetch(`${this.BASE_URL}${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(data)\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Python API Error:', error);\n      throw error;\n    }\n  }\n\n  // Load seasons (matches tkinter load_seasons method)\n  static async getSeasons() {\n    const response = await this.callPython('/api/seasons');\n    return response.seasons || [];\n  }\n\n  // Load collections for a season (matches tkinter load_selected_season)\n  static async getCollections(seasonUrl) {\n    const response = await this.callPython('/api/collections', {\n      seasonUrl\n    });\n    return response.collections || [];\n  }\n\n  // Download images for a collection (matches tkinter download_and_display_images)\n  static async downloadImages(collection) {\n    const response = await this.callPython('/api/download-images', {\n      collection\n    });\n    return {\n      imagePaths: response.imagePaths || [],\n      designerName: response.designerName || collection.designer,\n      error: response.error\n    };\n  }\n\n  // Download video for a collection (matches tkinter video download)\n  static async downloadVideo(collection) {\n    try {\n      const response = await this.callPython('/api/download-video', {\n        collection\n      });\n      return response.videoPath || null;\n    } catch (error) {\n      console.error('Video download error:', error);\n      return null;\n    }\n  }\n\n  // Get image file (for display)\n  static getImageUrl(imagePath) {\n    return `${this.BASE_URL}/api/image?path=${encodeURIComponent(imagePath)}`;\n  }\n\n  // Get video file (for playback)\n  static getVideoUrl(videoPath) {\n    return `${this.BASE_URL}/api/video?path=${encodeURIComponent(videoPath)}`;\n  }\n\n  // Clean up cache (matches tkinter cleanup_previous_downloads)\n  static async cleanupDownloads() {\n    const response = await this.callPython('/api/cleanup');\n    return response.success;\n  }\n\n  // Stream collections as they load (matches tkinter stream_collections_update)\n  static async streamCollections(seasonUrl, onUpdate) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/collections-stream`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          seasonUrl\n        })\n      });\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = JSON.parse(line.slice(6));\n              onUpdate(data);\n              if (data.complete) return data.collections || [];\n            } catch (e) {\n              console.error('Error parsing stream data:', e);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Stream error:', error);\n      throw error;\n    }\n  }\n\n  // Video search test (matches tkinter open_video_test)\n  static async testVideoSearch(query) {\n    const response = await this.callPython('/api/video-test', {\n      query\n    });\n    return response;\n  }\n\n  // Get application info (matches tkinter show_about)\n  static async getAboutInfo() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/about`);\n      return await response.json();\n    } catch (error) {\n      console.error('About info error:', error);\n      return null;\n    }\n  }\n\n  // Favourites API methods\n  static async getFavourites() {\n    console.log('API: Fetching favourites from', `${this.BASE_URL}/api/favourites`);\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/favourites`, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      const data = await response.json();\n      console.log('API: Raw favourites response:', data);\n      const favourites = data.favourites || [];\n      console.log('API: Parsed favourites:', favourites);\n      return favourites;\n    } catch (error) {\n      console.error('Get favourites API Error:', error);\n      return [];\n    }\n  }\n  static async addFavourite(seasonData, collectionData, lookData, imagePath, notes = '') {\n    const response = await this.callPython('/api/favourites', {\n      season: seasonData,\n      collection: collectionData,\n      look: lookData,\n      image_path: imagePath,\n      notes: notes\n    });\n    return response;\n  }\n  static async removeFavourite(seasonUrl, collectionUrl, lookNumber) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/favourites`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          season_url: seasonUrl,\n          collection_url: collectionUrl,\n          look_number: lookNumber\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Remove favourite API Error:', error);\n      throw error;\n    }\n  }\n  static async checkFavourite(seasonUrl, collectionUrl, lookNumber) {\n    const response = await this.callPython('/api/favourites/check', {\n      season_url: seasonUrl,\n      collection_url: collectionUrl,\n      look_number: lookNumber\n    });\n    return response.is_favourite || false;\n  }\n  static async getFavouriteStats() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/favourites/stats`, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.stats || {};\n    } catch (error) {\n      console.error('Favourites stats error:', error);\n      return {};\n    }\n  }\n  static async cleanupFavourites() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/favourites/cleanup`, {\n        method: 'POST'\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Cleanup favourites error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n\n  // My Brands API methods\n  static async getBrands() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands`, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.brands || [];\n    } catch (error) {\n      console.error('Get brands API Error:', error);\n      return [];\n    }\n  }\n  static async addBrand(brandData) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(brandData)\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Add brand API Error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n  static async getBrandDetails(brandId) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}`, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Get brand details API Error:', error);\n      return {\n        error: error.message\n      };\n    }\n  }\n  static async discoverBrandCollections(brandId) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/discover`, {\n        method: 'POST'\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Discover brand collections API Error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n  static async scrapeBrandProducts(brandId, collectionUrl = null) {\n    try {\n      const body = collectionUrl ? JSON.stringify({\n        collection_url: collectionUrl\n      }) : undefined;\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/scrape`, {\n        method: 'POST',\n        headers: collectionUrl ? {\n          'Content-Type': 'application/json'\n        } : {},\n        body: body\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Scrape brand products API Error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  // Stream brand products scraping with real-time progress\n  static async scrapeBrandProductsStream(brandId, onProgress, collectionUrl = null) {\n    try {\n      const body = collectionUrl ? JSON.stringify({\n        collection_url: collectionUrl\n      }) : undefined;\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/scrape-stream`, {\n        method: 'POST',\n        headers: collectionUrl ? {\n          'Content-Type': 'application/json'\n        } : {},\n        body: body\n      });\n      if (!response.ok) {\n        throw new Error(`Stream failed: ${response.statusText}`);\n      }\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let finalResult = null;\n      try {\n        while (true) {\n          const {\n            done,\n            value\n          } = await reader.read();\n          if (done) break;\n          const chunk = decoder.decode(value);\n          const lines = chunk.split('\\n');\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const data = JSON.parse(line.slice(6));\n\n                // Call progress callback\n                if (onProgress) {\n                  onProgress(data);\n                }\n\n                // Store final result\n                if (data.status === 'completed') {\n                  finalResult = data;\n                }\n              } catch (e) {\n                console.warn('Error parsing stream data:', e, 'Line:', line);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n      return finalResult || {\n        success: false,\n        message: 'Stream ended without final result'\n      };\n    } catch (error) {\n      console.error('Stream brand products API Error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n\n  // NEW: Clean category-first API methods for better UX\n  static async getBrandCategories(brandId) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/categories`, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Get brand categories API Error:', error);\n      return {\n        categories: {},\n        error: error.message\n      };\n    }\n  }\n  static async getCategoryProducts(brandId, categoryName) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/categories/${encodeURIComponent(categoryName)}/products`, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Get category products API Error:', error);\n      return {\n        products: [],\n        error: error.message\n      };\n    }\n  }\n\n  // LEGACY: Keep for backward compatibility\n  static async getBrandProducts(brandId) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/products`, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Get brand products API Error:', error);\n      return {\n        products: [],\n        error: error.message\n      };\n    }\n  }\n  static async addProductFavorite(productId, notes = '') {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/products/${productId}/favorite`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          notes\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Add product favorite API Error:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    }\n  }\n  static async getBrandFavorites() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brand-favorites`, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.favorites || [];\n    } catch (error) {\n      console.error('Get brand favorites API Error:', error);\n      return [];\n    }\n  }\n  static async getBrandStats() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/stats`, {\n        method: 'GET'\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data.stats || {};\n    } catch (error) {\n      console.error('Get brand stats API Error:', error);\n      return {};\n    }\n  }\n  static async analyzeBrandUrl(url) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          url\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Analyze brand URL API Error:', error);\n      return {\n        error: error.message\n      };\n    }\n  }\n  static async resolveBrandName(brandName) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/resolve-name`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          brand_name: brandName\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('Resolve brand name API Error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    }\n  }\n}\nFashionArchiveAPI.BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8081';\nexport { FashionArchiveAPI };","map":{"version":3,"names":["FashionArchiveAPI","callPython","endpoint","data","response","fetch","BASE_URL","method","headers","body","JSON","stringify","ok","Error","statusText","json","error","console","getSeasons","seasons","getCollections","seasonUrl","collections","downloadImages","collection","imagePaths","designerName","designer","downloadVideo","videoPath","getImageUrl","imagePath","encodeURIComponent","getVideoUrl","cleanupDownloads","success","streamCollections","onUpdate","reader","getReader","decoder","TextDecoder","done","value","read","chunk","decode","lines","split","line","startsWith","parse","slice","complete","e","testVideoSearch","query","getAboutInfo","getFavourites","log","favourites","addFavourite","seasonData","collectionData","lookData","notes","season","look","image_path","removeFavourite","collectionUrl","lookNumber","season_url","collection_url","look_number","checkFavourite","is_favourite","getFavouriteStats","stats","cleanupFavourites","message","getBrands","brands","addBrand","brandData","getBrandDetails","brandId","discoverBrandCollections","scrapeBrandProducts","undefined","scrapeBrandProductsStream","onProgress","finalResult","status","warn","releaseLock","getBrandCategories","categories","getCategoryProducts","categoryName","products","getBrandProducts","addProductFavorite","productId","getBrandFavorites","favorites","getBrandStats","analyzeBrandUrl","url","resolveBrandName","brandName","brand_name","process","env","REACT_APP_API_URL"],"sources":["/Users/bhavyajain/Code/fashion_archive/web_ui/src/services/api.js"],"sourcesContent":["// Fashion Archive API Service\n// Bridges React UI to Python backend maintaining exact same functionality\n\nclass FashionArchiveAPI {\n  static BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8081';\n\n  // Helper to call Python backend\n  static async callPython(endpoint, data = {}) {\n    try {\n      const response = await fetch(`${this.BASE_URL}${endpoint}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(data),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Python API Error:', error);\n      throw error;\n    }\n  }\n\n  // Load seasons (matches tkinter load_seasons method)\n  static async getSeasons() {\n    const response = await this.callPython('/api/seasons');\n    return response.seasons || [];\n  }\n\n  // Load collections for a season (matches tkinter load_selected_season)\n  static async getCollections(seasonUrl) {\n    const response = await this.callPython('/api/collections', { seasonUrl });\n    return response.collections || [];\n  }\n\n  // Download images for a collection (matches tkinter download_and_display_images)\n  static async downloadImages(collection) {\n    const response = await this.callPython('/api/download-images', { collection });\n    return {\n      imagePaths: response.imagePaths || [],\n      designerName: response.designerName || collection.designer,\n      error: response.error\n    };\n  }\n\n  // Download video for a collection (matches tkinter video download)\n  static async downloadVideo(collection) {\n    try {\n      const response = await this.callPython('/api/download-video', { collection });\n      return response.videoPath || null;\n    } catch (error) {\n      console.error('Video download error:', error);\n      return null;\n    }\n  }\n\n  // Get image file (for display)\n  static getImageUrl(imagePath) {\n    return `${this.BASE_URL}/api/image?path=${encodeURIComponent(imagePath)}`;\n  }\n\n  // Get video file (for playback)\n  static getVideoUrl(videoPath) {\n    return `${this.BASE_URL}/api/video?path=${encodeURIComponent(videoPath)}`;\n  }\n\n  // Clean up cache (matches tkinter cleanup_previous_downloads)\n  static async cleanupDownloads() {\n    const response = await this.callPython('/api/cleanup');\n    return response.success;\n  }\n\n  // Stream collections as they load (matches tkinter stream_collections_update)\n  static async streamCollections(seasonUrl, onUpdate) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/collections-stream`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ seasonUrl }),\n      });\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        const chunk = decoder.decode(value);\n        const lines = chunk.split('\\n');\n\n        for (const line of lines) {\n          if (line.startsWith('data: ')) {\n            try {\n              const data = JSON.parse(line.slice(6));\n              onUpdate(data);\n              if (data.complete) return data.collections || [];\n            } catch (e) {\n              console.error('Error parsing stream data:', e);\n            }\n          }\n        }\n      }\n    } catch (error) {\n      console.error('Stream error:', error);\n      throw error;\n    }\n  }\n\n  // Video search test (matches tkinter open_video_test)\n  static async testVideoSearch(query) {\n    const response = await this.callPython('/api/video-test', { query });\n    return response;\n  }\n\n  // Get application info (matches tkinter show_about)\n  static async getAboutInfo() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/about`);\n      return await response.json();\n    } catch (error) {\n      console.error('About info error:', error);\n      return null;\n    }\n  }\n\n  // Favourites API methods\n  static async getFavourites() {\n    console.log('API: Fetching favourites from', `${this.BASE_URL}/api/favourites`);\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/favourites`, {\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      console.log('API: Raw favourites response:', data);\n      const favourites = data.favourites || [];\n      console.log('API: Parsed favourites:', favourites);\n      return favourites;\n    } catch (error) {\n      console.error('Get favourites API Error:', error);\n      return [];\n    }\n  }\n\n  static async addFavourite(seasonData, collectionData, lookData, imagePath, notes = '') {\n    const response = await this.callPython('/api/favourites', {\n      season: seasonData,\n      collection: collectionData,\n      look: lookData,\n      image_path: imagePath,\n      notes: notes\n    });\n    return response;\n  }\n\n  static async removeFavourite(seasonUrl, collectionUrl, lookNumber) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/favourites`, {\n        method: 'DELETE',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          season_url: seasonUrl,\n          collection_url: collectionUrl,\n          look_number: lookNumber\n        }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Remove favourite API Error:', error);\n      throw error;\n    }\n  }\n\n  static async checkFavourite(seasonUrl, collectionUrl, lookNumber) {\n    const response = await this.callPython('/api/favourites/check', {\n      season_url: seasonUrl,\n      collection_url: collectionUrl,\n      look_number: lookNumber\n    });\n    return response.is_favourite || false;\n  }\n\n  static async getFavouriteStats() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/favourites/stats`, {\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.stats || {};\n    } catch (error) {\n      console.error('Favourites stats error:', error);\n      return {};\n    }\n  }\n\n  static async cleanupFavourites() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/favourites/cleanup`, {\n        method: 'POST'\n      });\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Cleanup favourites error:', error);\n      return { success: false, error: error.message };\n    }\n  }\n\n  // My Brands API methods\n  static async getBrands() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands`, {\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.brands || [];\n    } catch (error) {\n      console.error('Get brands API Error:', error);\n      return [];\n    }\n  }\n\n  static async addBrand(brandData) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(brandData),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Add brand API Error:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  static async getBrandDetails(brandId) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}`, {\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Get brand details API Error:', error);\n      return { error: error.message };\n    }\n  }\n\n  static async discoverBrandCollections(brandId) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/discover`, {\n        method: 'POST'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Discover brand collections API Error:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  static async scrapeBrandProducts(brandId, collectionUrl = null) {\n    try {\n      const body = collectionUrl ? JSON.stringify({ collection_url: collectionUrl }) : undefined;\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/scrape`, {\n        method: 'POST',\n        headers: collectionUrl ? { 'Content-Type': 'application/json' } : {},\n        body: body\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Scrape brand products API Error:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  // Stream brand products scraping with real-time progress\n  static async scrapeBrandProductsStream(brandId, onProgress, collectionUrl = null) {\n    try {\n      const body = collectionUrl ? JSON.stringify({ collection_url: collectionUrl }) : undefined;\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/scrape-stream`, {\n        method: 'POST',\n        headers: collectionUrl ? { 'Content-Type': 'application/json' } : {},\n        body: body\n      });\n\n      if (!response.ok) {\n        throw new Error(`Stream failed: ${response.statusText}`);\n      }\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder();\n      let finalResult = null;\n\n      try {\n        while (true) {\n          const { done, value } = await reader.read();\n          if (done) break;\n\n          const chunk = decoder.decode(value);\n          const lines = chunk.split('\\n');\n\n          for (const line of lines) {\n            if (line.startsWith('data: ')) {\n              try {\n                const data = JSON.parse(line.slice(6));\n                \n                // Call progress callback\n                if (onProgress) {\n                  onProgress(data);\n                }\n                \n                // Store final result\n                if (data.status === 'completed') {\n                  finalResult = data;\n                }\n                \n              } catch (e) {\n                console.warn('Error parsing stream data:', e, 'Line:', line);\n              }\n            }\n          }\n        }\n      } finally {\n        reader.releaseLock();\n      }\n\n      return finalResult || { success: false, message: 'Stream ended without final result' };\n\n    } catch (error) {\n      console.error('Stream brand products API Error:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  // NEW: Clean category-first API methods for better UX\n  static async getBrandCategories(brandId) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/categories`, {\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Get brand categories API Error:', error);\n      return { categories: {}, error: error.message };\n    }\n  }\n\n  static async getCategoryProducts(brandId, categoryName) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/categories/${encodeURIComponent(categoryName)}/products`, {\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Get category products API Error:', error);\n      return { products: [], error: error.message };\n    }\n  }\n\n  // LEGACY: Keep for backward compatibility\n  static async getBrandProducts(brandId) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/${brandId}/products`, {\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Get brand products API Error:', error);\n      return { products: [], error: error.message };\n    }\n  }\n\n  static async addProductFavorite(productId, notes = '') {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/products/${productId}/favorite`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ notes }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Add product favorite API Error:', error);\n      return { success: false, message: error.message };\n    }\n  }\n\n  static async getBrandFavorites() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brand-favorites`, {\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.favorites || [];\n    } catch (error) {\n      console.error('Get brand favorites API Error:', error);\n      return [];\n    }\n  }\n\n  static async getBrandStats() {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/stats`, {\n        method: 'GET'\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      return data.stats || {};\n    } catch (error) {\n      console.error('Get brand stats API Error:', error);\n      return {};\n    }\n  }\n\n  static async analyzeBrandUrl(url) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/analyze`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ url }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Analyze brand URL API Error:', error);\n      return { error: error.message };\n    }\n  }\n\n  static async resolveBrandName(brandName) {\n    try {\n      const response = await fetch(`${this.BASE_URL}/api/brands/resolve-name`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ brand_name: brandName }),\n      });\n      \n      if (!response.ok) {\n        throw new Error(`API call failed: ${response.statusText}`);\n      }\n      \n      return await response.json();\n    } catch (error) {\n      console.error('Resolve brand name API Error:', error);\n      return { success: false, error: error.message };\n    }\n  }\n}\n\nexport { FashionArchiveAPI };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}